user www-data;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;
    error_log /dev/stderr warn;
    sendfile on;
    keepalive_timeout 65;

    # Security headers
    server_tokens off;
    proxy_hide_header X-Powered-By;
    fastcgi_hide_header X-Powered-By;

    # Gzip
    gzip on;
    gzip_types text/plain text/css application/json application/javascript;

    map $http_user_agent $is_elb_healthchecker {
        default 0;
        "~ELB-HealthChecker/2.0" 1;
        "~kube-probe/1.30+" 1;
        "~Cloudflare-Healthchecks/1.0" 1;
    }

    server {
        listen 80;
        root /var/www/html/;
        index index.php index.html index.htm;

        # Specifies the maximum accepted body size of a client request, as
        # indicated by the request header Content-Length. If the stated content
        # length is greater than this size, then the client receives the HTTP
        # error code 413. Set to 0 to disable. Default is '1m'.
        client_max_body_size 1m;

        # Sendfile copies data between one FD and other from within the kernel,
        # which is more efficient than read() + write(). Default is off.
        sendfile on;
        sendfile_max_chunk 1m;

        # Causes nginx to attempt to send its HTTP response head in one packet,
        # instead of using partial frames. Default is 'off'.
        tcp_nopush on;

        # Security headerss
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "no-referrer";
        fastcgi_hide_header X-Powered-By;

        # Personal headers
        add_header foo bar;

        # Cors
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, Accept, Origin, User-Agent, DNT, Cache-Control, X-Mx-ReqToken, Keep-Alive, X-Requested-With, If-Modified-Since";

        add_header Cache-Control "no-store, no-cache, must-revalidate";

        error_page 404 = @json_404;

        location @json_404 {
            default_type application/json;
            return 404 '{"error": "Not Found"}';
        }

        # Preflighted requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        

        location ~ ^/\..*|.*/\..*$ {
            deny all;
            return 404;
        }

        location / {
            if ($is_elb_healthchecker) {
                access_log off;
                return 200;
                break;
            }

            # Serve static files like images, JavaScript, CSS, etc.
            location ~* \.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|eot|ttf|otf|mp4|webp|json|txt|xml|webmanifest|map)$ {
                root /var/www/html;
                expires 1d;   # Cache for 1 days
                access_log off;
            }

            location ~* ^/(?!index\.php$).*\.((?!php).)*$ {
                deny all;
                return 404;
            }
            try_files $uri $uri/ /index.php?_url=$uri&$args;
        }

        location ~ \.php$ {
            if ($request_filename !~ "^/var/www/html/index\.php$") {
                return 404;
            }

            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            include fastcgi_params;
            
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $uri;
            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
        }

        # Explicitly deny access to hidden files but log them
        location ~ /\.ht {
            deny all;
            access_log on;
        }
    }
}